#!/usr/bin/perl 

use strict;
use warnings;

use lib './';

use AnyEvent;
use Config::Simple;
use DBI;
use Fcntl qw(LOCK_EX LOCK_NB);

my $j = AnyEvent->condvar;

my @cnfopt = ('./dla.conf', '/etc/dla.conf', '~/.conf/dla.conf');
my $cnfile;
foreach my $test ( @cnfopt ) {
   if( -e $test ) {
      $cnfile = $test;
      last;
   }
}
   

# Load config
unless( -e $cnfile ) {
   print "Missing config file: $cnfile\n";
   exit;
}
my %config;
Config::Simple->import_from($cnfile, \%config);
my $dbfile = $config{'default.dbname'};

# Check PID file
if( -e $config{'default.pidfile'} ) {
   open(PID, "< " . $config{'default.pidfile'});
   my $pid = <PID>;
   close PID;
   print "dla already running PID: " . $pid . "\n";
   exit;
} else {
   open(PID, "> " . $config{'default.pidfile'});
   print PID $$;
   close PID;
}
$SIG{'INT'} = 'END';

open(STDOUT, ">>" . $config{'default.logfile'})
   or die("Couldn't open logger output stream: $!\n");
open(STDERR, ">&STDOUT")
   or die("Couldn't redirect STDERR to STDOUT: $!\n");
$| = 1;

chdir('/');

exit if (fork());
exit if (fork());
sleep 1 until getppid() == 1;

# Connect to db
generate_db();
my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", 
   $config{'default.dbuser'}, 
   $config{'default.dbpass'}
);

#Load modules
opendir(DIR, "Modules");
my @files = readdir(DIR); 
foreach my $file (@files) {
   if( $file =~ m/pm$/xms ) {
      (my $module = 'Modules::' . $file) =~ s/\.pm$//g;
      require 'Modules/' . $file;
      my $configs = config_module($dbh, $file);
      my $mod = new $module($configs);
   }
}

# The Loop
$j->wait;

sub generate_db {

   my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile", 
      $config{'default.dbuser'}, 
      $config{'default.dbpass'}
   );

   # Generate default tables and info
   my $query = 'CREATE TABLE IF NOT EXISTS modules (module_id INTEGER PRIMARY KEY ASC '
      . 'AUTOINCREMENT, module_name TEXT, module_type TEXT);';
   my $tmp = $dbh->prepare($query);
   $tmp->execute;
   $tmp->finish;

   $query = 'CREATE TABLE IF NOT EXISTS config (config_id INTEGER PRIMARY KEY ASC '
      . 'AUTOINCREMENT, config_key TEXT, config_value TEXT, module_id '
      . 'INTEGER, FOREIGN KEY(module_id) REFERENCES modules(module_id))';
   $tmp = $dbh->prepare($query);
   $tmp->execute;
   $tmp->finish;

   $query = 'CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY ASC '
      . 'AUTOINCREMENT, user_name TEXT)';
   $tmp = $dbh->prepare($query);
   $tmp->execute;
   $tmp->finish;

   $query = 'CREATE TABLE IF NOT EXISTS identities (ident_id INTEGER PRIMARY KEY ASC '
      . 'AUTOINCREMENT, user_id INTEGER, ident_name STRING, module_id '
      . 'INTEGER, FOREIGN KEY(user_id) REFERENCES users(user_id), FOREIGN '
      . 'KEY(module_id) REFERENCES modules(module_id))';
   $tmp = $dbh->prepare($query);
   $tmp->execute;
   $tmp->finish;

   $query = 'CREATE TABLE IF NOT EXISTS commands (cmd_id INTEGER PRIMARY KEY ASC '
      . 'AUTOINCREMENT, cmd_name STRING, cmd_method STRING, module_id '
      . 'INTEGER, FOREIGN KEY(module_id) REFERENCES modules(module_id))';
   $tmp = $dbh->prepare($query);
   $tmp->execute;
   $tmp->finish;

   $query = 'CREATE TABLE IF NOT EXISTS permissions (user_id INTEGER, cmd_id INTEGER, '
      . 'FOREIGN KEY(user_id) REFERENCES users(user_id), FOREIGN '
      . 'KEY(cmd_id) REFERENCES commands(cmd_id))';
   $tmp = $dbh->prepare($query);
   $tmp->execute;
   $tmp->finish;

   $dbh->disconnect;

} # end of generate_db method

sub config_module {

   my $dbh = shift;
   my $file = shift;
   $file =~ s/\.pm//gxms;
   my $module = 'Modules::' . $file;

   my $query = "SELECT * FROM modules WHERE module_name = '$file';";
   my $tmp = $dbh->prepare($query);
   $tmp->execute;

   my $id = 0;
   my $mods = $tmp->fetchall_arrayref;
   $tmp->finish;
   if( scalar(@{$mods}) == 0 ) {
      my $query = "INSERT INTO modules (module_name) VALUES ('$file');";
      my $tmp = $dbh->prepare($query);
      $tmp->execute;
      $tmp->finish;
      $id = $dbh->last_insert_id("", "", "modules", "");
      my $questions = $module->get_conf();
      #TODO make this part work over available and precedence-based
      #     communication modules
      foreach my $key (keys $questions) {
         print $questions->{$key};
         chomp(my $value = <STDIN>);
         $query = "INSERT INTO config (config_key, config_value, module_id) "
            . "VALUES ('$key', '$value', $id);";
         $tmp = $dbh->prepare($query);
         $tmp->execute;
         $tmp->finish;
      }
   } else {
      $id = $mods->[0][0];
   }
   $query = "SELECT config_key, config_value FROM config WHERE module_id = $id;";
   $tmp = $dbh->prepare($query);
   $tmp->execute;
   my $hash;
   while( my $row =$tmp->fetchrow_hashref() ) {
      $hash->{$row->{'config_key'}} = $row->{'config_value'};
   }
   return $hash;

} # end of config_module method

sub parse_message {

   my $msg = shift;
   if( $msg =~ m/^(\S*)/xms ) {
      my $cmd = $1;
      my $query = "SELECT * FROM commands WHERE cmd_name LIKE '%$cmd%';";
      my $tmp = $dbh->prepare($query);
      $tmp->execute;
      my $row = $tmp->fetchrow_hashref();
      if( defined($row) ) {
         my $a = $row->{'cmd_method'};
         $tmp->finish;
         return eval("$a(\$msg)");
      }
      $tmp->finish;
   }
   return "";

} # end of parse_message method

sub END { 

   open(PID, "< " . $config{'default.pidfile'});
   my $pid = <PID>;
   close PID;
   if( $pid == $$ ) {
      unlink($config{'default.pidfile'});
      print "Exiting...\n";
   }
   exit;

} # end of END method

